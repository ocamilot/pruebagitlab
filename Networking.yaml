AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy network infraestructure for CouchDB

Mappings:
    NetworkToSubnet:
        "10.0.0.0":
            PubSubnetZoneA: "10.0.10.0/24"
            PrivSubnetZoneA: "10.0.20.0/24"
            PubSubnetZoneB: "10.0.30.0/24"
            PrivSubnetZoneB: "10.0.40.0/24"
            PubSubnetZoneC: "10.0.50.0/24"
            PrivSubnetZoneC: "10.0.60.0/24"
            
Resources:
## Networking
    # VPC
  VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
          CidrBlock:
              'Fn::Join': [ '/', [ '10.0.0.0', '16' ] ]
          EnableDnsSupport: true
          EnableDnsHostnames: true
          InstanceTenancy: 'default'
          Tags:
              - Key: 'Name'
                Value:
                    Ref: 'AWS::StackName'

    # Internet accessable subnet in the first availability zone
  PubSubnetZoneA:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PubSubnetZoneA
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the first availability zone
  PrivSubnetZoneA:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PrivSubnetZoneA
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Internet accessable subnet in the second availability zone
  PubSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PubSubnetZoneB
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the second availability zone
  PrivSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PrivSubnetZoneB
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Internet accessable subnet in the third availability zone
  PubSubnetZoneC:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '2'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PubSubnetZoneC
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone C', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the third availability zone
  PrivSubnetZoneC:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '2'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PrivSubnetZoneC
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone C', !Ref 'AWS::StackName' ] ]
  
    # Gateway to the internet
  InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
          Tags:
              - Key: 'Name'
                Value:
                    Ref: 'AWS::StackName'

    # Associate the gateway to the VPC
  GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId:
              Ref: 'InternetGateway'
          VpcId:
              Ref: 'VPC'

    # Routing table for the public subnet in availability zone A
  RouteTablePubZoneA:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the public subnet in availability zone B
  RouteTablePubZoneB:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Routing table for the public subnet in availability zone B
  RouteTablePubZoneC:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone C', !Ref 'AWS::StackName' ] ]

    # Route traffic through the internet gateway
  RoutePubZoneA:
      Type: AWS::EC2::Route
      Properties:
          DestinationCidrBlock: '0.0.0.0/0'
          GatewayId:
              Ref: 'InternetGateway'
          RouteTableId:
              Ref: 'RouteTablePubZoneA'

    # Route traffic through the internet gateway
  RoutePubZoneB:
      Type: AWS::EC2::Route
      Properties:
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
              Ref: 'InternetGateway'
          RouteTableId:
              Ref: 'RouteTablePubZoneB'

    # Route traffic through the internet gateway
  RoutePubZoneC:
      Type: AWS::EC2::Route
      Properties:
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
              Ref: 'InternetGateway'
          RouteTableId:
              Ref: 'RouteTablePubZoneC'

    # Associate public subnet to its routing table
  RouteAssociationPubSubnetZoneA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PubSubnetZoneA'
          RouteTableId:
              Ref: 'RouteTablePubZoneA'

    # Associate public subnet to its routing table
  RouteAssociationPubSubnetZoneB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PubSubnetZoneB'
          RouteTableId:
              Ref: 'RouteTablePubZoneB'

    # Associate public subnet to its routing table
  RouteAssociationPubSubnetZoneC:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PubSubnetZoneC'
          RouteTableId:
              Ref: 'RouteTablePubZoneC'

    # Routing table for the private subnet in availability zone A
  RouteTablePrivZoneA:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the private subnet in availability zone B
  RouteTablePrivZoneB:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Routing table for the private subnet in availability zone B
  RouteTablePrivZoneC:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone C', !Ref 'AWS::StackName' ] ]

    # Associate the private subnet with its routing table
  RouteAssociationPrivSubnetZoneA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PrivSubnetZoneA'
          RouteTableId:
              Ref: 'RouteTablePrivZoneA'

  # Associate the private subnet with its routing table
  RouteAssociationPrivSubnetZoneB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PrivSubnetZoneB'
          RouteTableId:
              Ref: 'RouteTablePrivZoneB'

  # Associate the private subnet with its routing table
  RouteAssociationPrivSubnetZoneC:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PrivSubnetZoneC'
          RouteTableId:
              Ref: 'RouteTablePrivZoneC'
